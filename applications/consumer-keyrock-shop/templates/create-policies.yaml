kind: ConfigMap
apiVersion: v1
metadata:
  name: consumer-shop-{{ .Values.initScript.createPolicies.id }}-policy-cm
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "2"
data:
  create.sh: |-
    mysql -h {{ .Values.keyrock.db.host }} -u {{ .Values.keyrock.db.user }} -p$DB_PASSWORD {{ .Values.initScript.createPolicies.dbName }} <<EOF

    SET @rules := JSON_ARRAY(
      JSON_OBJECT(
        "effect", "Permit"
      )
    );

    {{- range $v := .Values.initScript.createPolicies.user }}
    -- Create policies for user: {{ $v.username }}
    SET @userid := (select id from user where username = '{{ $v.username }}');

    {{- if $v.isPrime -}}
    
    SET @policies := JSON_ARRAY(
      JSON_OBJECT(
        "rules", CAST(@rules as JSON),
        "target", JSON_OBJECT(
          "actions", JSON_ARRAY("PATCH"),
          "resource", JSON_OBJECT(
            "type", "DELIVERYORDER",
            "attributes", JSON_ARRAY("pta","pda"),
            "identifiers", JSON_ARRAY({{ $v.entityId | quote }})
          )
        )
      ),
      JSON_OBJECT(
        "rules", CAST(@rules as JSON),
        "target", JSON_OBJECT(
          "actions", JSON_ARRAY("GET"),
          "resource", JSON_OBJECT(
            "type", "DELIVERYORDER",
            "attributes", JSON_ARRAY("*"),
            "identifiers", JSON_ARRAY({{ $v.entityId | quote }})
          )
        )
      )
    );
    {{- else }}
    
    SET @policies := JSON_ARRAY(
      JSON_OBJECT(
        "rules", CAST(@rules as JSON),
        "target", JSON_OBJECT(
          "actions", JSON_ARRAY("GET"),
          "resource", JSON_OBJECT(
            "type", "DELIVERYORDER",
            "attributes", JSON_ARRAY("*"),
            "identifiers", JSON_ARRAY({{ $v.entityId | quote }})
          )
        )
      )
    );
    {{- end }}

    SET @delegation := JSON_OBJECT(
      "target", JSON_OBJECT(
        "accessSubject", @userid
      ),
      "notBefore", {{ $.Values.initScript.createPolicies.notBefore }},
      "notOnOrAfter", {{ $.Values.initScript.createPolicies.notOnOrAfter }},
      "policyIssuer", {{ $.Values.initScript.createPolicies.issuer | quote }},
      "policySets", JSON_ARRAY(
        JSON_OBJECT(
          "target", JSON_OBJECT(
            "environment", JSON_OBJECT(
              "licenses", JSON_ARRAY("ISHARE.0001")
            )
          ),
          "policies", CAST(@policies as JSON)
        )
      )
    );

    INSERT IGNORE INTO delegation_evidence (policy_issuer, access_subject,policy) VALUES ({{ $.Values.initScript.createPolicies.issuer | quote }}, @userid, @delegation);
    
    {{- end }}
    
    COMMIT;
    EOF
